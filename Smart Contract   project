// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ErrorHandlingExample {
    address public owner;
    mapping(address => uint256) public balances;

    constructor() {
        owner = msg.sender;
    }

    // Function to deposit ether
    function deposit() external payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[msg.sender] += msg.value;
    }

    // Function to withdraw ether
    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    // Function that demonstrates assert
    function assertExample(uint256 x) external pure returns (uint256) {
        uint256 result = x * 2;
        assert(result >= x); // Ensure no overflow
        return result;
    }

    // Function that demonstrates revert
    function revertExample(uint256 divisor) external pure returns (uint256) {
        require(divisor != 0, "Divisor cannot be zero");
        uint256 result = 100 / divisor;
        return result;
    }

    // Function to self-destruct the contract (for demonstration purposes)
    function destroyContract() external {
        require(msg.sender == owner, "Only the owner can destroy the contract");
        selfdestruct(payable(owner));
    }
}
